rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // VideoMetadata rules
    match /videoMetadata/{videoId} {
      allow read: if true; // Anyone can read video metadata
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['likes', 'comments', 'shares', 'views', 'averageWatchDuration', 'completionRate', 'watchTimeDistribution', 'lastEngagementAt']));
      allow delete: if isAuthenticated() && resource.data.artist == request.auth.uid;
    }
    
    // UserPreferences rules
    match /userPreferences/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Comments rules
    match /comments/{commentId} {
      allow read: if true;  // Allow anyone to read comments
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'username', 'videoId', 'text', 'timestamp', 'commentLikes']) &&
        request.resource.data.commentLikes == 0;
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentLikes'])
      );
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Interactions rules
    match /interactions/{interactionId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // UserSessions rules
    match /userSessions/{sessionId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
  }
}